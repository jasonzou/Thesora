package example

import java.io.IOException
import java.nio.file._
import java.nio.file.attribute.BasicFileAttributes

import org.elasticsearch.common.settings.ImmutableSettings
import org.elasticsearch.node.NodeBuilder

object EmbeddedNode {
    val defaultSettings = Map(
            "node.name" -> "Testing",
            "http.enabled" -> "false")

    def apply() = {
        new EmbeddedNode(defaultSettings)
    }
}

class EmbeddedNode(settings: Map[String, String]) {

    val settingsWithDefaults = (settings.keySet ++ EmbeddedNode.defaultSettings.keySet).map { key =>
        key -> settings.getOrElse(key, EmbeddedNode.defaultSettings(key))
    } toMap

    val dataPath = settingsWithDefaults.getOrElse("path.data",
        Files.createTempDirectory("temp-").toString)

    import scala.collection.JavaConversions.mapAsJavaMap
    val settingsBuilder = ImmutableSettings.builder().put(mapAsJavaMap(settingsWithDefaults))

    if (!settingsWithDefaults.contains("path.data"))
        settingsBuilder.put("path.data", dataPath)

    private lazy val node = NodeBuilder.nodeBuilder()
        .local(true)
        .settings(settingsBuilder.build())
        .build()

    def client() = {
        node.client()
    }

    def start() = {
        node.start()
        this
    }

    def createAndWaitForIndex(index: String): Unit = {
        client.admin.indices.prepareCreate(index).execute.actionGet()
        client.admin.cluster.prepareHealth(index).setWaitForActiveShards(1).execute.actionGet()
    }

    def shutdown(delete: Boolean = true) = {
        node.stop()
        node.close()
        if (delete)
            deleteData
    }

    def deleteData() = {
        try {
            Files.walkFileTree(Paths.get(dataPath), new SimpleFileVisitor[Path] {
                override def visitFile(file: Path, attrs: BasicFileAttributes): FileVisitResult = {
                    Files.deleteIfExists(file)
                    super.visitFile(file, attrs)
                }
                override def postVisitDirectory(dir: Path, exc: IOException): FileVisitResult = {
                    Files.deleteIfExists(dir)
                    super.postVisitDirectory(dir, exc)
                }
            })
        } catch {
            case e: IOException =>
                throw new RuntimeException("Could not delete data directory of embedded elasticsearch server", e);
        }
    }
}
